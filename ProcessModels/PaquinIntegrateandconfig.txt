//Integrate and Configure Model -- Collin Paquin
%%% Dylan's edits

1. Research and Evaluation: Timeline: 3 Weeks
    Identify the necessary components and technologies required for the scheduling system, such as a database management system, user interface framework, etc.
    Conduct research online to evaluate different options and choose the best components based on the system requirements.
    Some potential online resources for each component:
        Database Management System: MySQL (https://www.mysql.com/) or PostgreSQL (https://www.postgresql.org/)
        User Interface Framework: Django (https://www.djangoproject.com/) or React (https://reactjs.org/)
        Potentially Look into using:
        Authentication System: OAuth (https://oauth.net/) or JSON Web Tokens (https://jwt.io/)
%%% These are great resources that didn't come to mind in my own search. I focused more on existing open-source projects while these are more like coding languages
%%% with libraries/features that would be useful for the project. I think this is closer to what should be in this section as opposed to the resources I found

2. Configuration and Integration: Timeline: 4 Weeks
    Configure and integrate the selected components into the scheduling system, ensuring they work together.
    Set up the chosen database management system (e.g., MySQL) and design the database schema to store user information, course details, and schedules.
    Integrate the selected user interface framework for the user interfaces and for the scheduling system, incorporating features like course search, schedule management, and user registration.
    Potentially:
    Configure the chosen authentication system (e.g., OAuth) to handle user authentication and authorization, ensuring secure access to the system.
%%% OAuth is a good choice as it is free up to a certiain amount of users (which this project doesn't exceed)

3. Testing and Fine-tuning: Timeline: 3 Weeks
    Conduct testing to ensure the integrated online components function correctly and meet the system requirements.
    Perform compatibility testing to ensure all integrated components work harmoniously, verifying that the database, user interface, authentication, and reporting components are properly integrated and communicating.
    Fine-tune the configuration settings of the selected components for optimal performance, security, and usability.
    Address any issues or conflicts that arise during the testing phase, troubleshooting and resolving any integration-related problems.